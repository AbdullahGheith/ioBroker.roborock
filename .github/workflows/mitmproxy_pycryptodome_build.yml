name: Build mitmproxy with pycryptodome

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.compare_releases.outputs.new_release }}
      new_version: ${{ steps.determine_new_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine new version
        id: determine_new_version
        run: |
          git clone https://github.com/mitmproxy/mitmproxy.git
          cd mitmproxy
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "::set-output name=new_version::${latest_tag}"
          cd ..
          rm -rf mitmproxy

      - name: Determine currently installed version
        id: determine_installed_version
        run: |
          installed_version=$(cat mitmproxy_release.txt 2>/dev/null || echo "")
          echo "::set-output name=installed_version::${installed_version}"

      - name: Compare releases
        id: compare_releases
        run: |
          if [ "${{ steps.determine_installed_version.outputs.installed_version }}" != "${{ steps.determine_new_version.outputs.new_version }}" ]; then
            echo "New release detected: ${{ steps.determine_new_version.outputs.new_version }}"
            echo "${{ steps.determine_new_version.outputs.new_version }}" > mitmproxy_release.txt
            echo "::set-output name=new_release::true"
          else
            echo "No new release detected"
            echo "::set-output name=new_release::false"
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update mitmproxy to ${{ steps.determine_new_version.outputs.new_version }}"
          base: "main"
          branch: "mitmproxy_${{ steps.determine_new_version.outputs.new_version }}"
          commit-message: "Update mitmproxy version number"

  build_linux:
    needs: determine_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: mitmproxy_${{ needs.determine_version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clone mitmproxy repository
        run: |
          git clone https://github.com/mitmproxy/mitmproxy.git
          cd mitmproxy
          git checkout ${{ needs.determine_version.outputs.new_version }}

      - name: Create mitmproxy binaries for Linux
        run: |
          cd mitmproxy
          python -m venv venv
          source venv/bin/activate
          pip install pycryptodome
          deactivate
          venv/bin/pip install -e ".[dev]"
          mkdir -p ../lib/mitmproxy/linux
          cp -rL ./venv/* ../lib/mitmproxy/linux
          cd ..
          rm -rf mitmproxy

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add Linux binaries" -a
          git push origin HEAD:${{ needs.determine_version.outputs.new_version }}

  build_windows:
    needs: [determine_version, build_linux]
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: mitmproxy_${{ needs.determine_version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Clone mitmproxy repository
        run: |
          git clone https://github.com/mitmproxy/mitmproxy.git
          cd mitmproxy
          git checkout ${{ needs.determine_version.outputs.new_version }}

      - name: Create mitmproxy binaries for Windows
        run: |
          cd mitmproxy
          python -m venv venv
          .\venv\Scripts\activate
          pip install pycryptodome
          .\venv\Scripts\deactivate
          .\venv\Scripts\pip install -e ".[dev]"
          New-Item -Path ..\lib\mitmproxy\windows -ItemType Directory -Force
          Copy-Item -Path .\venv\* -Destination ..\lib\mitmproxy\windows -Recurse -Force
          cd ..
          Remove-Item -Recurse -Force mitmproxy

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add Windows binaries" -a
          git push origin HEAD:${{ needs.determine_version.outputs.new_version }}