name: Build mitmproxy with pycryptodome

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.compare_releases.outputs.new_release }}
      installed_version: ${{ steps.determine_version.outputs.installed_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Determine currently installed version
        id: determine_version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.repos.getLatestRelease({
              owner: 'mitmproxy',
              repo: 'mitmproxy'
            });
            const installedVersion = response.data.tag_name;
            console.log(`::set-output name=installed_version::${installedVersion}`);


      - name: Read previous release
        id: read_previous_release
        run: |
          previous_release=$(cat mitmproxy_release.txt 2>/dev/null || echo "")
          echo "::set-output name=previous_release::${previous_release}"

      - name: Compare releases
        id: compare_releases
        run: |
          if [ "${{ needs.determine_version.outputs.installed_version }}" != "${{ steps.read_previous_release.outputs.previous_release }}" ]; then
            echo "New release detected: ${{ needs.determine_version.outputs.installed_version }}"
            echo "${{ needs.determine_version.outputs.installed_version }}" > mitmproxy_release.txt
            echo "::set-output name=new_release::true"
          else
            echo "No new release detected"
            echo "::set-output name=new_release::false"
          fi

  build:
    needs: determine_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.determine_version.outputs.installed_version }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          cd mitmproxy
          python -m venv venv
          source venv/bin/activate
          pip install pycryptodome
          deactivate
          venv/bin/pip install -e ".[dev]"
          mkdir -p ../lib/mitmproxy/linux
          cp -r ./venv/* ../lib/mitmproxy/linux

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          cd mitmproxy
          python -m venv venv
          .\venv\Scripts\activate
          pip install pycryptodome
          .\venv\Scripts\deactivate
          .\venv\Scripts\pip install -e ".[dev]"
          New-Item -Path ..\lib\mitmproxy\windows -ItemType Directory -Force
          Copy-Item -Path .\venv\* -Destination ..\lib\mitmproxy\windows -Recurse

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          cd mitmproxy
          python3 -m venv venv
          source venv/bin/activate
          pip install pycryptodome
          deactivate
          venv/bin/pip install -e ".[dev]"
          mkdir -p ../lib/mitmproxy/macos
          cp -r ./venv/* ../lib/mitmproxy/macos

      - name: Create Pull Request
        if: needs.determine_version.outputs.new_release == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update mitmproxy to ${{ needs.determine_version.outputs.installed_version }}"
          base: "main"
          branch: "mitmproxy_${{ needs.determine_version.outputs.installed_version }}"
