name: Login and fetch data

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install axios and crypto
      run: npm install axios crypto

    - name: Login and fetch data
      env:
        USERNAME: ${{ secrets.ROBOROCK_USERNAME }}
        PASSWORD: ${{ secrets.ROBOROCK_PASSWORD }}
      run: |
        node -e "
        const axios = require('axios');
        const crypto = require('crypto');

        const username = process.env.USERNAME;
        const password = process.env.PASSWORD;
        const clientID = crypto.randomUUID();

        const loginApi = axios.create({
          baseURL: 'https://euiot.roborock.com',
          headers: {
            'header_clientid': crypto.createHash('md5').update(username).update(clientID).digest().toString('base64'),
          },
        });

        loginApi.post('api/v1/login', new URLSearchParams({
          username: username,
          password: password,
          needtwostepauth: 'false'
        }).toString())
        .then(res => {
          loginApi.defaults.headers.common['Authorization'] = res.data.data.token;

          loginApi.get('api/v3/product')
            .then(res => {
              // console.log('Product data: ' + JSON.stringify(res.data.data.categoryDetailList));
              const list = res.data.data.categoryDetailList[1]['productList'];
              //console.log('Product data: ' + JSON.stringify(list));

              const appPluginRequest = {
                "apilevel": 10016,
                "productids": [],
                "type": 2
              };

              for (const product in list) {
                const vacuum = list[product];
                console.log('vacuum ' + vacuum.name + ' id: ' + vacuum.id);
                  appPluginRequest.productids.push(vacuum.id);
              }

              console.log('appPluginRequest: ' + JSON.stringify(appPluginRequest));
              loginApi.post('api/v1/appplugin', appPluginRequest)
                .then(res => {
                  console.log('appplugin data: ' + JSON.stringify(res.data));
                })
                .catch(err => console.error(err));
            })
            .catch(err => console.error(err));
          })
          .catch(err => console.error(err));"
